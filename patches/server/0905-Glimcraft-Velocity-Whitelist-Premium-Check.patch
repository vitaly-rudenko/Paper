From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Vitaly Rudenko <maurice.dederick@gmail.com>
Date: Sun, 15 May 2022 16:02:22 +0300
Subject: [PATCH] Glimcraft-Velocity-Whitelist-Premium-Check


diff --git a/src/main/java/com/destroystokyo/paper/PaperConfig.java b/src/main/java/com/destroystokyo/paper/PaperConfig.java
index 1ac6cf51f2682d5eb14fe19646e79f6617d492dd..2bd192a992b857e2cbbef3198b8a409d8955378c 100644
--- a/src/main/java/com/destroystokyo/paper/PaperConfig.java
+++ b/src/main/java/com/destroystokyo/paper/PaperConfig.java
@@ -15,9 +15,11 @@ import java.util.List;
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
+import java.util.logging.Logger;
 import java.util.regex.Pattern;
 
 import com.google.common.collect.Lists;
+import glimcraft.WhitelistApi;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -294,7 +296,21 @@ public class PaperConfig {
         bungeeOnlineMode = getBoolean("settings.bungee-online-mode", true);
     }
 
-    public static boolean isProxyOnlineMode() {
+    public static WhitelistApi whitelistApi;
+    public static boolean isProxyOnlineMode(String playerName) {
+        log("PaperConfig#isProxyOnlineMode(" + playerName + ")");
+
+        if (whitelistApi == null) {
+            log("Creating WhitelistApi instance...");
+            whitelistApi = new WhitelistApi(
+                getString("settings.glimcraft.apiUrl", "http://api:3000"),
+                getString("settings.glimcraft.apiKey", "api-key-123"),
+                Logger.getLogger("GlimcraftWhitelistAPI")
+            );
+        }
+
+        if (!whitelistApi.isPremium(playerName)) return false;
+
         return Bukkit.getOnlineMode() || (SpigotConfig.bungee && bungeeOnlineMode) || (velocitySupport && velocityOnlineMode);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
index 2041376dfd5520776f7e32c1828973f2b719d82a..21e2acae30dd0b2787e2cdef45e5cb626b2e2042 100644
--- a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
@@ -177,7 +177,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
 
     @Override
     public boolean completeFromCache() {
-        return completeFromCache(false, PaperConfig.isProxyOnlineMode());
+        return completeFromCache(false, PaperConfig.isProxyOnlineMode(getName()));
     }
 
     public boolean completeFromCache(boolean onlineMode) {
@@ -220,7 +220,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
     }
 
     public boolean complete(boolean textures) {
-        return complete(textures, PaperConfig.isProxyOnlineMode());
+        return complete(textures, PaperConfig.isProxyOnlineMode(getName()));
     }
     public boolean complete(boolean textures, boolean onlineMode) {
         MinecraftServer server = MinecraftServer.getServer();
diff --git a/src/main/java/glimcraft/WhitelistApi.java b/src/main/java/glimcraft/WhitelistApi.java
new file mode 100644
index 0000000000000000000000000000000000000000..c46fa9d36a8bcfb9ce87a7848337cce193372005
--- /dev/null
+++ b/src/main/java/glimcraft/WhitelistApi.java
@@ -0,0 +1,138 @@
+package glimcraft;
+
+import org.jetbrains.annotations.NotNull;
+import org.json.simple.JSONArray;
+import org.json.simple.JSONObject;
+import org.json.simple.parser.JSONParser;
+
+import java.net.URI;
+import java.net.http.HttpClient;
+import java.net.http.HttpRequest;
+import java.net.http.HttpResponse;
+import java.time.Duration;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class WhitelistApi {
+
+    public record WhitelistEntry(String name, String uuid, boolean isPremium) {
+    }
+
+    private final String apiUrl;
+    private final String apiKey;
+    private final Logger logger;
+
+    private final HttpClient client = HttpClient.newHttpClient();
+    private final Map<String, WhitelistEntry> whitelistEntryCache = new HashMap<>();
+
+    private boolean isInitialized = false;
+
+    public WhitelistApi(String apiUrl, String apiKey, Logger logger) {
+        this.apiUrl = apiUrl;
+        this.apiKey = apiKey;
+        this.logger = logger;
+    }
+
+    public boolean isPremium(String name) {
+        return getWhitelistEntry(name).isPremium();
+    }
+
+    synchronized WhitelistEntry getWhitelistEntry(String name) {
+        initializeWhitelistEntriesIfNecessary();
+
+        if (whitelistEntryCache.containsKey(name)) {
+            logger.info(name + "'s whitelist entry is already loaded, using cached version: " + whitelistEntryCache.get(name));
+        }
+
+        if (!whitelistEntryCache.containsKey(name)) {
+            logger.info( name + " is not in the cache, loading their whitelist entry...");
+
+            try {
+                whitelistEntryCache.put(name, fetchWhitelistEntry(name));
+            } catch (Exception exception) {
+                logger.log(Level.SEVERE, "Could not fetch whitelist entry for " + name, exception);
+                throw new RuntimeException(exception);
+            }
+
+            logger.info(name + "'s whitelist entry: " + whitelistEntryCache.get(name));
+        }
+
+        return whitelistEntryCache.get(name);
+    }
+
+    void initializeWhitelistEntriesIfNecessary() {
+        System.out.println("Initializing whitelist entries...");
+
+        if (isInitialized) {
+            System.out.println("Whitelist entries are already initialized, ignored");
+            return;
+        }
+
+        try {
+            System.out.println("Fetching whitelist entries...");
+            List<WhitelistEntry> entries = fetchWhitelistEntries();
+            for (WhitelistEntry entry : entries) {
+                whitelistEntryCache.put(entry.name(), entry);
+                System.out.println("Loaded whitelist entry: " + entry);
+            }
+            isInitialized = true;
+        } catch (Exception exception) {
+            logger.log(Level.SEVERE, "Could not fetch whitelist entries", exception);
+            throw new RuntimeException(exception);
+        }
+    }
+
+    @NotNull WhitelistEntry fetchWhitelistEntry(@NotNull String name) throws Exception {
+        HttpRequest request = HttpRequest.newBuilder()
+            .uri(new URI(apiUrl + "/whitelist/" + name))
+            .header("x-api-key", apiKey)
+            .timeout(Duration.ofSeconds(30))
+            .GET()
+            .build();
+
+        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
+
+        if (response.statusCode() != 200) {
+            throw new Exception("Whitelist entry for " + name
+                + " does not exist or could not be loaded (response: " + response.statusCode() + ")");
+        }
+
+        return parseWhitelistEntry(new JSONParser().parse(response.body()));
+    }
+
+    @NotNull List<WhitelistEntry> fetchWhitelistEntries() throws Exception {
+        HttpRequest request = HttpRequest.newBuilder()
+            .uri(new URI(apiUrl + "/whitelist"))
+            .header("x-api-key", apiKey)
+            .timeout(Duration.ofSeconds(30))
+            .GET()
+            .build();
+
+        HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
+
+        if (response.statusCode() != 200) {
+            throw new Exception("Could not successfully load whitelist entries (response: " + response.statusCode() + ")");
+        }
+
+        JSONArray rawEntries = (JSONArray) new JSONParser().parse(response.body());
+
+        List<WhitelistEntry> entries = new ArrayList<>();
+        for (Object rawEntry : rawEntries) {
+            entries.add(parseWhitelistEntry(rawEntry));
+        }
+
+        return entries;
+    }
+
+    WhitelistEntry parseWhitelistEntry(Object entry) {
+        String name = (String) ((JSONObject) entry).get("name");
+        String uuid = (String) ((JSONObject) entry).get("uuid");
+        boolean isPremium = (Boolean) ((JSONObject) entry).get("isPremium");
+
+        return new WhitelistEntry(name, uuid, isPremium);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index befcb501b4b1b6330bf3cd53e00e30b01efade6f..6893247eda92c7d9ef9107f5f1a80c91d1ad204e 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -253,7 +253,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
         this.gameProfile = packet.getGameProfile();
         Validate.validState(ServerLoginPacketListenerImpl.isValidUsername(this.gameProfile.getName()), "Invalid characters in username", new Object[0]);
         // Paper start - validate usernames
-        if (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode() && com.destroystokyo.paper.PaperConfig.performUsernameValidation) {
+        if (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(this.gameProfile.getName()) && com.destroystokyo.paper.PaperConfig.performUsernameValidation) {
             if (!this.iKnowThisMayNotBeTheBestIdeaButPleaseDisableUsernameValidation && !validateUsername(this.gameProfile.getName())) {
                 ServerLoginPacketListenerImpl.this.disconnect("Failed to verify username!");
                 return;
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 9259eeea54d77ddecf044edf80e0eca6cb95278f..2f6ff5fbd139eef654dbf4145b455f908de5f0b8 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -105,11 +105,11 @@ public class GameProfileCache {
             }
         };
 
-        if (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode()) // Paper - only run in online mode - 100 COL
+        if (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(name)) // Paper - only run in online mode - 100 COL
         repository.findProfilesByNames(new String[]{name}, Agent.MINECRAFT, profilelookupcallback);
         GameProfile gameprofile = (GameProfile) atomicreference.get();
 
-        if (!GameProfileCache.usesAuthentication() && gameprofile == null && !org.apache.commons.lang3.StringUtils.isBlank(name)) { // Paper - Don't lookup a profile with a blank name
+        if (!GameProfileCache.usesAuthentication(name) && gameprofile == null && !org.apache.commons.lang3.StringUtils.isBlank(name)) { // Paper - Don't lookup a profile with a blank name
             UUID uuid = Player.createPlayerUUID(new GameProfile((UUID) null, name));
 
             return Optional.of(new GameProfile(uuid, name));
@@ -122,8 +122,8 @@ public class GameProfileCache {
         GameProfileCache.usesAuthentication = value;
     }
 
-    private static boolean usesAuthentication() {
-        return com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(); // Paper
+    private static boolean usesAuthentication(String name) {
+        return com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(name); // Paper
     }
 
     public void add(GameProfile profile) {
diff --git a/src/main/java/net/minecraft/server/players/OldUsersConverter.java b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
index aa3caccc58f1cec8d5f396813d7fc40b05985cc8..d0a9093afca9587acc3a5a0c4fba826c3996857f 100644
--- a/src/main/java/net/minecraft/server/players/OldUsersConverter.java
+++ b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.players;
 
+import com.destroystokyo.paper.PaperConfig;
 import com.destroystokyo.paper.exception.ServerInternalException;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
@@ -13,14 +14,7 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.text.ParseException;
-import java.util.Collection;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-import java.util.Optional;
-import java.util.UUID;
+import java.util.*;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtIo;
@@ -60,28 +54,28 @@ public class OldUsersConverter {
     }
 
     private static void lookupPlayers(MinecraftServer server, Collection<String> bannedPlayers, ProfileLookupCallback callback) {
-        String[] astring = (String[]) bannedPlayers.stream().filter((s) -> {
-            return !StringUtil.isNullOrEmpty(s);
-        }).toArray((i) -> {
-            return new String[i];
-        });
-
-        if (server.usesAuthentication()
-                || (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode())) { // Spigot: bungee = online mode, for now.  // Paper - Handle via setting
-            server.getProfileRepository().findProfilesByNames(astring, Agent.MINECRAFT, callback);
-        } else {
-            String[] astring1 = astring;
-            int i = astring.length;
+        // glimcraft customization start
+        String[] bannedPlayerNames = bannedPlayers.stream()
+            .filter((s) -> !StringUtil.isNullOrEmpty(s))
+            .toArray(String[]::new);
 
-            for (int j = 0; j < i; ++j) {
-                String s = astring1[j];
-                UUID uuid = Player.createPlayerUUID(new GameProfile((UUID) null, s));
-                GameProfile gameprofile = new GameProfile(uuid, s);
+        final String[] onlineModePlayerNames = Arrays.stream(bannedPlayerNames)
+            .filter(name -> server.usesAuthentication() || PaperConfig.isProxyOnlineMode(name))
+            .toArray(String[]::new);
 
-                callback.onProfileLookupSucceeded(gameprofile);
-            }
+        final String[] offlineModePlayerNames = Arrays.stream(bannedPlayerNames)
+            .filter(name -> !(server.usesAuthentication() || PaperConfig.isProxyOnlineMode(name)))
+            .toArray(String[]::new);
+
+        if (onlineModePlayerNames.length > 0) {
+            server.getProfileRepository().findProfilesByNames(onlineModePlayerNames, Agent.MINECRAFT, callback);
         }
 
+        for (String name : offlineModePlayerNames) {
+            UUID uuid = Player.createPlayerUUID(new GameProfile(null, name));
+            callback.onProfileLookupSucceeded(new GameProfile(uuid, name));
+        }
+        // glimcraft customization end
     }
 
     public static boolean convertUserBanlist(final MinecraftServer server) {
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 95fe4240f3e1174ec36598f24d63f0073c13b376..4364c547ef3dbb2a502c78d4c815669373cbba31 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -714,7 +714,7 @@ public abstract class PlayerList {
 
         for (int i = 0; i < this.players.size(); ++i) {
             entityplayer = (ServerPlayer) this.players.get(i);
-            if (entityplayer.getUUID().equals(uuid) || (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode() && entityplayer.getGameProfile().getName().equalsIgnoreCase(gameprofile.getName()))) { // Paper - validate usernames
+            if (entityplayer.getUUID().equals(uuid) || (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(gameprofile.getName()) && entityplayer.getGameProfile().getName().equalsIgnoreCase(gameprofile.getName()))) { // Paper - validate usernames
                 list.add(entityplayer);
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 15278bb897e6169bc5d02bf47b455634baec7be1..c46de519fedc7043ff3400c14ea8c13e64eb5b33 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1779,7 +1779,7 @@ public final class CraftServer implements Server {
         }
         GameProfile profile;
         // Only fetch an online UUID in online mode
-        if (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode()) {
+        if (com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(name)) {
             profile = console.getProfileCache().get(name).orElse(null);
         } else {
             // Make an OfflinePlayer using an offline mode UUID since the name has no profile
@@ -1800,7 +1800,7 @@ public final class CraftServer implements Server {
             // Spigot Start
             GameProfile profile = null;
             // Only fetch an online UUID in online mode
-            if ( this.getOnlineMode() || com.destroystokyo.paper.PaperConfig.isProxyOnlineMode() ) // Paper - Handle via setting
+            if ( this.getOnlineMode() || com.destroystokyo.paper.PaperConfig.isProxyOnlineMode(name) ) // Paper - Handle via setting
             {
                 profile = this.console.getProfileCache().get(name).orElse(null);
             }
